type Account = record {
    owner: principal;
    subaccount: opt vec nat8;
};

type Invoice = record {
    to: Account;
    amount: nat;
    hash: vec nat8;
    used: bool;
    operation: text;
    caller: principal;
};

type Transfer = record {
    amount: nat;
    to: Account;
    created_at_time: opt nat;
    memo: opt vec nat8;
};

type InvoiceMap = record {
    prncpl: principal;
    invoice: Invoice;
};

type Minter = record {
    invoices: vec InvoiceMap;
};

service : {
    init: () -> ();
    get_stable: (vec nat8) -> (result: variant { Ok: text; Err: text });
    create_invoice: (nat, text) -> (Invoice);
    redeem: (vec nat8) -> (result: variant { Ok: text; Err: text });
}


